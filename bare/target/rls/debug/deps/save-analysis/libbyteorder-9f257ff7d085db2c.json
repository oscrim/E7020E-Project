{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49],"program":"/home/carl/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","byteorder","/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=9f257ff7d085db2c","-C","extra-filename=-9f257ff7d085db2c","--out-dir","/home/carl/embedded system/e7020e_2019/target/rls/debug/deps","-L","dependency=/home/carl/embedded system/e7020e_2019/target/rls/debug/deps","--cap-lints","allow","--cfg","byteorder_i128","--error-format=json","--sysroot","/home/carl/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,99,97,114,108,47,101,109,98,101,100,100,101,100,32,115,121,115,116,101,109,47,101,55,48,50,48,101,95,50,48,49,57,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,98,121,116,101,111,114,100,101,114,45,57,102,50,53,55,102,102,55,100,48,56,53,100,98,50,99,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[13419585184044054911,17636691569629991362]},"crate_root":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.1/src","external_crates":[{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[10358360718026081486,10831388908142601634]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6832099878452181958,18188783392230512595]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[701116368877019049,15596873805647340511]}}],"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":103062,"line_start":1,"line_end":3315,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":103062,"line_start":1,"line_end":3315,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":36},{"krate":0,"index":308},{"krate":0,"index":336},{"krate":0,"index":334},{"krate":0,"index":330},{"krate":0,"index":326},{"krate":0,"index":322},{"krate":0,"index":318},{"krate":0,"index":314},{"krate":0,"index":310},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":340},{"krate":0,"index":368},{"krate":0,"index":366},{"krate":0,"index":362},{"krate":0,"index":358},{"krate":0,"index":354},{"krate":0,"index":350},{"krate":0,"index":346},{"krate":0,"index":342},{"krate":0,"index":180},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":254}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either [big-endian or little-endian order].","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2171,"byte_end":2193,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2228,"byte_end":2234,"line_start":65,"line_end":65,"column_start":35,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4201,"byte_end":4207,"line_start":169,"line_end":169,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5455,"byte_end":5464,"line_start":209,"line_end":209,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5699,"byte_end":5707,"line_start":218,"line_end":218,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6216,"byte_end":6224,"line_start":237,"line_end":237,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6757,"byte_end":6765,"line_start":258,"line_end":258,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7290,"byte_end":7298,"line_start":277,"line_end":277,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::ByteOrder::read_u48","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from `buf`, stored in u64.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7831,"byte_end":7839,"line_start":298,"line_end":298,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8359,"byte_end":8368,"line_start":318,"line_end":318,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::ByteOrder::read_u128","value":"fn (buf: &[u8]) -> u128","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8329,"byte_end":8351,"line_start":317,"line_end":317,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8912,"byte_end":8921,"line_start":338,"line_end":338,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9513,"byte_end":9525,"line_start":359,"line_end":359,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::ByteOrder::read_uint128","value":"fn (buf: &[u8], nbytes: usize) -> u128","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9483,"byte_end":9505,"line_start":358,"line_end":358,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10031,"byte_end":10040,"line_start":378,"line_end":378,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10557,"byte_end":10566,"line_start":397,"line_end":397,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11111,"byte_end":11120,"line_start":418,"line_end":418,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11653,"byte_end":11662,"line_start":437,"line_end":437,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::ByteOrder::write_u48","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12207,"byte_end":12216,"line_start":458,"line_end":458,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12744,"byte_end":12754,"line_start":478,"line_end":478,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::ByteOrder::write_u128","value":"fn (buf: &mut [u8], n: u128) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12714,"byte_end":12736,"line_start":477,"line_end":477,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13344,"byte_end":13354,"line_start":498,"line_end":498,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13992,"byte_end":14005,"line_start":519,"line_end":519,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::ByteOrder::write_uint128","value":"fn (buf: &mut [u8], n: u128, nbytes: usize) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13962,"byte_end":13984,"line_start":518,"line_end":518,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14518,"byte_end":14526,"line_start":539,"line_end":539,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14501,"byte_end":14510,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15090,"byte_end":15098,"line_start":561,"line_end":561,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15073,"byte_end":15082,"line_start":560,"line_end":560,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15643,"byte_end":15651,"line_start":583,"line_end":583,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15626,"byte_end":15635,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16231,"byte_end":16239,"line_start":605,"line_end":605,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::ByteOrder::read_i48","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from `buf`, stored in i64.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16214,"byte_end":16223,"line_start":604,"line_end":604,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16792,"byte_end":16800,"line_start":627,"line_end":627,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16775,"byte_end":16784,"line_start":626,"line_end":626,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17383,"byte_end":17392,"line_start":650,"line_end":650,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::ByteOrder::read_i128","value":"fn (buf: &[u8]) -> i128","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17339,"byte_end":17361,"line_start":648,"line_end":648,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17366,"byte_end":17375,"line_start":649,"line_end":649,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17990,"byte_end":17998,"line_start":673,"line_end":673,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17973,"byte_end":17982,"line_start":672,"line_end":672,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18665,"byte_end":18676,"line_start":697,"line_end":697,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::ByteOrder::read_int128","value":"fn (buf: &[u8], nbytes: usize) -> i128","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18621,"byte_end":18643,"line_start":695,"line_end":695,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18648,"byte_end":18657,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19294,"byte_end":19302,"line_start":720,"line_end":720,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19277,"byte_end":19286,"line_start":719,"line_end":719,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19922,"byte_end":19930,"line_start":743,"line_end":743,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19905,"byte_end":19914,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20503,"byte_end":20512,"line_start":765,"line_end":765,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20486,"byte_end":20495,"line_start":764,"line_end":764,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21088,"byte_end":21097,"line_start":787,"line_end":787,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21071,"byte_end":21080,"line_start":786,"line_end":786,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21654,"byte_end":21663,"line_start":809,"line_end":809,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21637,"byte_end":21646,"line_start":808,"line_end":808,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22255,"byte_end":22264,"line_start":831,"line_end":831,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::ByteOrder::write_i48","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer `n` to `buf`, stored in i64.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22238,"byte_end":22247,"line_start":830,"line_end":830,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22829,"byte_end":22838,"line_start":853,"line_end":853,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22812,"byte_end":22821,"line_start":852,"line_end":852,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23440,"byte_end":23450,"line_start":876,"line_end":876,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::ByteOrder::write_i128","value":"fn (buf: &mut [u8], n: i128) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23396,"byte_end":23418,"line_start":874,"line_end":874,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23423,"byte_end":23432,"line_start":875,"line_end":875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24091,"byte_end":24100,"line_start":899,"line_end":899,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24074,"byte_end":24083,"line_start":898,"line_end":898,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24819,"byte_end":24831,"line_start":923,"line_end":923,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::ByteOrder::write_int128","value":"fn (buf: &mut [u8], n: i128, nbytes: usize) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24775,"byte_end":24797,"line_start":921,"line_end":921,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24802,"byte_end":24811,"line_start":922,"line_end":922,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25461,"byte_end":25470,"line_start":946,"line_end":946,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25444,"byte_end":25453,"line_start":945,"line_end":945,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26119,"byte_end":26128,"line_start":970,"line_end":970,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26102,"byte_end":26111,"line_start":969,"line_end":969,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26903,"byte_end":26916,"line_start":996,"line_end":996,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"fn (src: &[u8], dst: &mut [u16]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27596,"byte_end":27609,"line_start":1019,"line_end":1019,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28289,"byte_end":28302,"line_start":1042,"line_end":1042,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29014,"byte_end":29028,"line_start":1066,"line_end":1066,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::ByteOrder::read_u128_into","value":"fn (src: &[u8], dst: &mut [u128]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28984,"byte_end":29006,"line_start":1065,"line_end":1065,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29718,"byte_end":29731,"line_start":1090,"line_end":1090,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"fn (src: &[u8], dst: &mut [i16]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29701,"byte_end":29710,"line_start":1089,"line_end":1089,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30585,"byte_end":30598,"line_start":1119,"line_end":1119,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"fn (src: &[u8], dst: &mut [i32]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30568,"byte_end":30577,"line_start":1118,"line_end":1118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31453,"byte_end":31466,"line_start":1148,"line_end":1148,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"fn (src: &[u8], dst: &mut [i64]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31436,"byte_end":31445,"line_start":1147,"line_end":1147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32353,"byte_end":32367,"line_start":1178,"line_end":1178,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::ByteOrder::read_i128_into","value":"fn (src: &[u8], dst: &mut [i128]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32309,"byte_end":32331,"line_start":1176,"line_end":1176,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32336,"byte_end":32345,"line_start":1177,"line_end":1177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33280,"byte_end":33293,"line_start":1208,"line_end":1208,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::ByteOrder::read_f32_into","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33263,"byte_end":33272,"line_start":1207,"line_end":1207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34385,"byte_end":34408,"line_start":1242,"line_end":1242,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34292,"byte_end":34301,"line_start":1240,"line_end":1240,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34306,"byte_end":34377,"line_start":1241,"line_end":1241,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35202,"byte_end":35215,"line_start":1269,"line_end":1269,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::ByteOrder::read_f64_into","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35185,"byte_end":35194,"line_start":1268,"line_end":1268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36316,"byte_end":36339,"line_start":1304,"line_end":1304,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36223,"byte_end":36232,"line_start":1302,"line_end":1302,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36237,"byte_end":36308,"line_start":1303,"line_end":1303,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37065,"byte_end":37079,"line_start":1329,"line_end":1329,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"fn (src: &[u16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37760,"byte_end":37774,"line_start":1352,"line_end":1352,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"fn (src: &[u32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38455,"byte_end":38469,"line_start":1375,"line_end":1375,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"fn (src: &[u64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39182,"byte_end":39197,"line_start":1399,"line_end":1399,"column_start":8,"column_end":23},"name":"write_u128_into","qualname":"::ByteOrder::write_u128_into","value":"fn (src: &[u128], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39152,"byte_end":39174,"line_start":1398,"line_end":1398,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39876,"byte_end":39890,"line_start":1422,"line_end":1422,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"fn (src: &[i16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40727,"byte_end":40741,"line_start":1450,"line_end":1450,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"fn (src: &[i32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41578,"byte_end":41592,"line_start":1478,"line_end":1478,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"fn (src: &[i64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42461,"byte_end":42476,"line_start":1507,"line_end":1507,"column_start":8,"column_end":23},"name":"write_i128_into","qualname":"::ByteOrder::write_i128_into","value":"fn (src: &[i128], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42431,"byte_end":42453,"line_start":1506,"line_end":1506,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43402,"byte_end":43416,"line_start":1538,"line_end":1538,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"fn (src: &[f32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44340,"byte_end":44354,"line_start":1569,"line_end":1569,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"fn (src: &[f64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45095,"byte_end":45109,"line_start":1593,"line_end":1593,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"fn (numbers: &mut [u16]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45684,"byte_end":45698,"line_start":1612,"line_end":1612,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"fn (numbers: &mut [u32]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46273,"byte_end":46287,"line_start":1631,"line_end":1631,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"fn (numbers: &mut [u64]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46893,"byte_end":46908,"line_start":1651,"line_end":1651,"column_start":8,"column_end":23},"name":"from_slice_u128","qualname":"::ByteOrder::from_slice_u128","value":"fn (numbers: &mut [u128]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46863,"byte_end":46885,"line_start":1650,"line_end":1650,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47496,"byte_end":47510,"line_start":1671,"line_end":1671,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"fn (src: &mut [i16]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47479,"byte_end":47488,"line_start":1670,"line_end":1670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48248,"byte_end":48262,"line_start":1696,"line_end":1696,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"fn (src: &mut [i32]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48231,"byte_end":48240,"line_start":1695,"line_end":1695,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49000,"byte_end":49014,"line_start":1721,"line_end":1721,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"fn (src: &mut [i64]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48983,"byte_end":48992,"line_start":1720,"line_end":1720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49783,"byte_end":49798,"line_start":1747,"line_end":1747,"column_start":8,"column_end":23},"name":"from_slice_i128","qualname":"::ByteOrder::from_slice_i128","value":"fn (src: &mut [i128]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49739,"byte_end":49761,"line_start":1745,"line_end":1745,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49766,"byte_end":49775,"line_start":1746,"line_end":1746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50222,"byte_end":50236,"line_start":1759,"line_end":1759,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"fn (numbers: &mut [f32]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50506,"byte_end":50520,"line_start":1766,"line_end":1766,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"fn (numbers: &mut [f64]) -> ()","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51031,"byte_end":51040,"line_start":1786,"line_end":1786,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51022,"byte_end":51043,"line_start":1786,"line_end":1786,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51022,"byte_end":51043,"line_start":1786,"line_end":1786,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51239,"byte_end":51241,"line_start":1797,"line_end":1797,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":340},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51756,"byte_end":51768,"line_start":1816,"line_end":1816,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51747,"byte_end":51771,"line_start":1816,"line_end":1816,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51747,"byte_end":51771,"line_start":1816,"line_end":1816,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51985,"byte_end":51987,"line_start":1827,"line_end":1827,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52714,"byte_end":52727,"line_start":1853,"line_end":1853,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":53041,"byte_end":53053,"line_start":1864,"line_end":1864,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52999,"byte_end":53031,"line_start":1863,"line_end":1863,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4237,"byte_end":4249,"line_start":170,"line_end":170,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4280,"byte_end":4289,"line_start":171,"line_end":171,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51062,"byte_end":51071,"line_start":1788,"line_end":1788,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51790,"byte_end":51802,"line_start":1818,"line_end":1818,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":55294,"byte_end":55303,"line_start":1944,"line_end":1944,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61009,"byte_end":61021,"line_start":2159,"line_end":2159,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4237,"byte_end":4249,"line_start":170,"line_end":170,"column_start":28,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":340},"to":{"krate":0,"index":30}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4280,"byte_end":4289,"line_start":171,"line_end":171,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":308},"to":{"krate":0,"index":30}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5471,"byte_end":5476,"line_start":210,"line_end":210,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2598},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5479,"byte_end":5483,"line_start":210,"line_end":210,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":1710},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5486,"byte_end":5491,"line_start":210,"line_end":210,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":8426},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5494,"byte_end":5501,"line_start":210,"line_end":210,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2632},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5504,"byte_end":5506,"line_start":210,"line_end":210,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2416},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5509,"byte_end":5513,"line_start":210,"line_end":210,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":8002},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5516,"byte_end":5519,"line_start":210,"line_end":210,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":2446},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5522,"byte_end":5531,"line_start":210,"line_end":210,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":1,"index":2410},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5534,"byte_end":5544,"line_start":210,"line_end":210,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":1,"index":2464},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5560,"byte_end":5566,"line_start":211,"line_end":211,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":30},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51062,"byte_end":51071,"line_start":1788,"line_end":1788,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":308},"to":{"krate":1,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51790,"byte_end":51802,"line_start":1818,"line_end":1818,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":340},"to":{"krate":1,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":55294,"byte_end":55303,"line_start":1944,"line_end":1944,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":308},"to":{"krate":0,"index":36}},{"span":{"file_name":[47,104,111,109,101,47,99,97,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":61009,"byte_end":61021,"line_start":2159,"line_end":2159,"column_start":20,"column_end":32},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":340},"to":{"krate":0,"index":36}}]}